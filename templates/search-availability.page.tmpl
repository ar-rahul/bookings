{{template "base" .}}


{{define "loadjs"}}

<script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/js/datepicker-full.min.js" ></script>
<script src="https://unpkg.com/notie" ></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11" ></script>

{{end}}


{{define "content"}}

<div class="container">

    <div class="row">
        <div class="col">
            <h1 class="mt-4">Search for Availability</h1>

            <form action="" method="get" novalidate class="needs-validation">

                <div class="row mb-4" id="reservation-dates">
                    <div class="form-group col-3">
                        <input required class="form-control" type="text" placeholder="Check-in date" name="start">      
                    </div>
                    <div class="form-group col-3">
                        <input required class="form-control" type="text" placeholder="Check-out date" name="end">
                    </div>
                </div>


                <button type="submit" class="btn btn-primary mb-4">Search Availability</button>
              </form>

              


        </div>
    </div>

</div>

    <script>

        let attention = Prompt();

        (function(){
            'use strict';
            window.addEventListener('load', function(){

                let forms = document.getElementsByClassName('needs-validation');

                Array.prototype.filter.call(forms,function(form){
                    form.addEventListener('submit',function(event){
                        if(form.checkValidity() === false){
                            event.preventDefault();
                            event.stopPropagation();
                                                    
                        }
                        form.classList.add('was-validated');
                    }, false);
                    });           
            }, false);

        })();


        const elem = document.getElementById('reservation-dates');
        const rangepicker = new DateRangePicker(elem, {
            format: "dd-mm-yyyy"
            }); 
            

        // Example starter JavaScript for disabling form submissions if there are invalid fields
        // (function () {
        // 'use strict'

        // // Fetch all the forms we want to apply custom Bootstrap validation styles to
        // var forms = document.querySelectorAll('.needs-validation')

        // // Loop over them and prevent submission
        // Array.prototype.slice.call(forms)
        //     .forEach(function (form) {
        //     form.addEventListener('submit', function (event) {
        //         if (!form.checkValidity()) {
        //         event.preventDefault()
        //         event.stopPropagation()
        //         }

        //         form.classList.add('was-validated')
        //     }, false)
        //     })
        // })()

        function notify(msg, msgType){
            notie.alert({
                type: msgType,
                text: msg,
            })
        }
        
        function notifyModal(title,text,icon,comfirmationButtonText){
            console.log("Notify function triggered");


            Swal.fire({
                    title: title,
                    html: text,
                    icon: icon,
                    confirmButtonText: comfirmationButtonText
                })
        }

    function Prompt(){
        let toast = function(c){
            const{
                msg="",
                icon="success",
                position ="top-end"

            }=c;
            const Toast = Swal.mixin({
                toast: true,
                title:msg,
                icon:icon,
                position: position,
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.onmouseenter = Swal.stopTimer;
                    toast.onmouseleave = Swal.resumeTimer;
                }
            });
            Toast.fire({
            });
        }

        let success = function(c){
            const{
                msg ="",
                title="",
                footer="",

            }=c;
                Swal.fire({
                icon: "error",
                title: title,
                text: msg,
                footer: footer,
                });     
        }

        let error = function(c){
            const{
                msg ="",
                title="",
                footer="",

            }=c;
                Swal.fire({
                icon: "error",
                title: title,
                text: msg,
                footer: footer,
                });     
        }

        async function custom(c){
            const{
                msg="",
                title="",
            } = c;
            const { value: formValues } = await Swal.fire({
                title: title,
                html: msg,
                backdrop: false,
                focusConfirm: false,
                showCancelButton: true,
                willOpen: () => {
                    const elem = document.getElementById('reservation-dates-modal');
                    const rangepicker = new DateRangePicker(elem, {
                        format: "dd-mm-yyyy",
                        orientation : "top",

                        
                    }); 

                },

                preConfirm: () => {
                    return [
                    document.getElementById("start").value,
                    document.getElementById("end").value
                    ];
                },
                
                didOpen: () => {
                    document.getElementById('start').removeAttribute('disabled');
                    document.getElementById('end').removeAttribute('disabled');

                }
            });
            if (formValues) {
                Swal.fire(JSON.stringify(formValues));
            }
        }

        return{
            toast: toast,
            success: success,
            error: error,
            custom:custom,

        }
    }

    </script>

{{end}}

